from pydantic import BaseModel, Field, ConfigDict


class Router(BaseModel):
    """Router Pydantic class.

    Args:
        decision : Stores the decision made by the router
    """
    model_config = ConfigDict(extra='forbid')
    decision: str = Field(
        description="This field contains the decision made by the model between SUMMARIZER, CODER or END"
    )
   

class Coder(BaseModel):
     """Coder Pydantic class.
    Args:
        code (str) : Code generated by the model.
        filename(str) : Filename created by the model.
    """
     
     model_config = ConfigDict(extra='forbid')
     code: str = Field(None, description="Code generated for the given query")
     filename: str = Field(
        description="filename for the generated code. It should also have appropriate extension"
    )
   
class Summarizer(BaseModel):
    """Summarizer Pydantic class.
    Args:
        code (str) : Summary of the  content generated by the model.
        filename(str) : Filename created by the model.
    """
    model_config = ConfigDict(extra='forbid')
    summary: str = Field(description="your elaborate answer here")
    filename: str = Field(
        description="This field contains the file name for elaborate summary . It should **strictly** have .txt extension"
    )



class Audio(BaseModel):
    """Audio summary Pydantic class.
        Args:
            name (boostrl) : Name of the tools selected by the agent.  
            arguments(dict) : dictionary of the arguments.
            filename(str): filename to store the audio file.
        """
    model_config = ConfigDict(extra='forbid')
    name: str = Field(description="Name of the tools selected by the agent")
    arguments: dict = Field(description="dictionary of the arguments.")
    filename: str = Field(description="filename to store the audio file.")
